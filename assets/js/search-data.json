{
  
    
        "post0": {
            "title": "Unit 3 Sections 17-18",
            "content": "Do Now!!! . Set up your notebook by either wgetting the lesson or tracking it by your own (We would recommend wgetting since there are some fill in the blanks!) | . 3.17: Algorithm Efficiency . Purpose: . 3.18: Undecidable Problems . Purpose: . The purpose of this lesson is to introduce students to the concept of undecidable problems in computer science and to explain why these problems are important. . Key vocabulary: . Decision problem | Decidable problem | Undecidable problem | . Decision Problem . A decision problem is a problem in computer science and mathematics that can be solved by a yes-no answer, also known as a binary answer. In other words, a decision problem is a problem for which there are only two possible outputs:&quot;yes&quot; or &quot;no&quot;. There are two types of decision problems that Collegeboard goes over: . Decidable Problems | Undecidable Problems | . A __ is a problem in computer science and mathematics for which an algorithm can be created that can always produce a correct answer or solution. In other words, a decidable problem is a problem for which there exists an algorithm that can be used to determine whether a given input is a valid solution or not. . An __ problem is a problem in computer science and mathematics for which it is impossible to create an algorithm that can always provide a correct answer or solution. This means that it is not possible for an algorithm to always determine whether a given input is a valid solution to an undecidable problem. . Decidable Problems . content down here fore Evan . Undecidable Problems . An Example of a Forever Running Code . The code keeps adding 1 to the variable number until number is no longer an integer. However, there is no end to this code, making the computer run forever. There is no halt to the code. . i = 0 number = 1 def integerTest(n): if type(n) == int: return True else: return False while i == 0: number += 1 if integerTest(number) == False: i +=1 print(&quot;Done&quot;) . Delete the parentheses later below. . There is __(no way) to write an algorithm to analyze and determine whether this code can run forever or not. . In order to understand this, suppose that an algorithm was able to analyze whether a code halts or not. Let&#39;s call this algorithm HaltCheck. | In the above code, the code __(code runs forever), so HaltCheck returns an output of &quot;no end&quot;. | Then, we add another machine called Opposite which reverses HaltCheck&#39;s output. So, if &quot;no end&quot; is the output of HaltCheck, then the output of Opposite is &quot;halt&quot;. It&#39;s also the same the other way around; if HaltCheck has an output of &quot;halt&quot;, then Opposite has an output of &quot;no end&quot;. | We combine these algorithms into one entire body of code. | Since Opposite is the algorithm at the end, hence giving the ultimate output, notice how it prints &quot;no end&quot; when in fact there is an end(As proved by HaltCheck), and how it also prints &quot;halt&quot; when there is in fact is no end to the code(Also proved by HaltCheck). | . The Halting Problem . The halting problem is an example of an undecidable problem. . Homework: . Use the Jupyter notebook to write an algorithm that solves a decidable problem. You can use math or whatever else you would like to do. | Write code to get the computer to run forever. Check this example if you need help, but please come up with your own idea. |",
            "url": "https://mmaxwu.github.io/Tri2-GroupFastpages/lessons/2022/12/13/dd-lesson.html",
            "relUrl": "/lessons/2022/12/13/dd-lesson.html",
            "date": " • Dec 13, 2022"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "College Board Notes",
          "content": "Notes .",
          "url": "https://mmaxwu.github.io/Tri2-GroupFastpages/CollegeboardNotes/",
          "relUrl": "/CollegeboardNotes/",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Us",
          "content": "Fastpages for Max, Jishnu, Alan, Evan .",
          "url": "https://mmaxwu.github.io/Tri2-GroupFastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page12": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://mmaxwu.github.io/Tri2-GroupFastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}